encounter$agebase <- rep(agebase,times = numobs)
encounter$race <-  rep(race,times = numobs)
encounter$gender <-  rep(gender,times = numobs)
encounter$heightbase <-  rep(heightbase,times = numobs)
encounter$weightbase <-  rep(weightbase,times = numobs)
encounter$servicedate <- encounter$firstdate + rdunif(nrow(encounter),0,4*365)
encounter$age <- encounter$agebase+(encounter$servicedate-encounter$firstdate)/365
encounter <- encounter[order(encounter$servicedate),]
encounter <- encounter[order(encounter$patientid),]
encounter$servicedate <- as.character(as.Date("1/1/2001","%m/%d/%Y")+encounter$servicedate)
encounter$diagname <- sample(c(as.character(diagnoses$diagnosis_group),rep("Premature adrenarche",20000),rep("Lipid disorder",20000),rep("Ophthalmic",30000),rep("Depression",30000)),nrow(encounter), replace = T)
diagnamemap <- t(apply(data.frame(date=encounter$servicedate,diag=encounter$diagname),1,icdrep))
encounter$diag <-diagnamemap[,1]
encounter$proc <-diagnamemap[,2]
encounter$prov <-diagnamemap[,3]
encounter$med <- diagnamemap[,4]
drugs <- rbinom(nrow(encounter),1,0.01)
meas <- rbinom(nrow(encounter),1,0.97)
meds <- data.frame(patientid = encounter$patientid, presdate = encounter$servicedate, drug = encounter$med)[drugs==1,]
measure <- data.frame(patientid = encounter$patientid, measdate = encounter$servicedate,
heightbase = encounter$heightbase, weightbase = encounter$weightbase)[meas ==1,]
measure$height <- rnorm(nrow(measure),measure$heightbase + heightlongmod$coef[2]*(encounter$age-encounter$agebase)[meas == 1] +
heightlongmod$coef[4]*(encounter$age^2-encounter$agebase^2)[meas == 1] +heightlongmod$coef[5]*(encounter$age-encounter$agebase)[meas == 1]*(encounter$gender[meas == 1] == "Male") +
heightlongmod$coef[6]*(encounter$age^2-encounter$agebase^2)[meas == 1]*(encounter$gender[meas == 1] == "Male"),sd = 2)
measure$weight <- rnorm(nrow(measure),measure$weightbase + weightmod$coef[2]*(measure$height - measure$heightbase) + weightmod$coef[4]*(measure$height-measure$heightbase)*(encounter$gender[meas == 1] == "Male"),sd = 2)
measure$bmi <- measure$weight/(measure$height/100)^2
heightin <- rbinom(nrow(measure),1,0.001)
measure$height <- ifelse(heightin==1,measure$height*2.54,measure$height)
weightlbs <- rbinom(nrow(measure),1,0.0084)
measure$weight <- ifelse(weightlbs==1,measure$weight*2.2,measure$weight)
gluc <- rbinom(nrow(encounter),1,0.46*(encounter$diagname %in% c("Type 2 diabetes","Type 1 diabetes"))+0.16*(!(encounter$diagname %in% c("Type 2 diabetes","Type 1 diabetes"))))
glucose <- data.frame(patientid = encounter$patientid, measdate = encounter$servicedate,
diag = encounter$diagname)[gluc ==1,]
glucose$glucose <- rnorm(nrow(glucose),141*(glucose$diag %in% c("Type 2 diabetes","Type 1 diabetes"))
+93*(!(glucose$diag %in% c("Type 2 diabetes","Type 1 diabetes"))),
sd = 104*(glucose$diag %in% c("Type 2 diabetes","Type 1 diabetes"))
+27*(!(glucose$diag %in% c("Type 2 diabetes","Type 1 diabetes"))))
glucose$glucose <- ifelse(glucose$glucose <28, rnorm(sum(glucose$glucose < 28),100,10),glucose$glucose)
hb <- rbinom(nrow(encounter),1,0.493*(encounter$diagname %in% c("Type 2 diabetes","Type 1 diabetes"))+0.08*(!(encounter$diagname %in% c("Type 2 diabetes","Type 1 diabetes"))))
hba1c <- data.frame(patientid = encounter$patientid, measdate = encounter$servicedate,
diag = encounter$diagname)[hb ==1,]
hba1c$hba1c <- rnorm(nrow(hba1c),6.93*(hba1c$diag %in% c("Type 2 diabetes","Type 1 diabetes"))
+5.71*(!(hba1c$diag %in% c("Type 2 diabetes","Type 1 diabetes"))),
sd = 1.9*(hba1c$diag %in% c("Type 2 diabetes","Type 1 diabetes"))
+1.1*(!(hba1c$diag %in% c("Type 2 diabetes","Type 1 diabetes"))))
hba1c$hba1c <- ifelse(hba1c$hba1c <2.1, rnorm(sum(hba1c$hba1c < 2.1),3.7,0.7),hba1c$hba1c)
# create combined measurements dataset
meascomb <- data.frame(patientid = c(measure$patientid,measure$patientid,glucose$patientid,hba1c$patientid),
servicedate = c(as.character(measure$measdate),as.character(measure$measdate),
as.character(glucose$measdate),as.character(hba1c$measdate)),
measurement = c(measure$height,measure$weight,glucose$glucose,hba1c$hba1c),
measuretype = c(rep("height", nrow(measure)),rep("weight",nrow(measure)),
rep("glucose",nrow(glucose)),rep("hba1c",nrow(hba1c))))
meascomb <- meascomb[order(meascomb$servicedate),]
meascomb <- meascomb[order(meascomb$patientid),]
# create small validation data set with true DM status
valid <- sample(patientid,1000, replace = F)
encounterv <- encounter[encounter$patientid %in% valid,]
medsv <- meds[meds$patientid %in% valid,]
bmiv <- data.frame(patientid = measure$patientid, bmi = measure$bmi)[measure$patientid %in% valid,]
glucosev <- data.frame(patientid = glucose$patientid, glucose = glucose$glucose)[glucose$patientid %in% valid,]
hba1cv <- data.frame(patientid = hba1c$patientid, hba1c = hba1c$hba1c)[hba1c$patientid %in% valid,]
bmiv$meanbmi <- unsplit(sapply(split(bmiv$bmi,bmiv$patientid),mean),bmiv$patientid)
glucosev$meanglu <- unsplit(sapply(split(glucosev$glucose,glucosev$patientid),mean),glucosev$patientid)
hba1cv$meanhba <- unsplit(sapply(split(hba1cv$hba1c,hba1cv$patientid),mean),hba1cv$patientid)
encounterv$T2DM <- unsplit(sapply(split(encounterv$diagname,encounterv$patientid),
function(x){sum(1*(regexpr("Type 2",x)>0))>0}),encounterv$patientid)
encounterv$T1DM <- unsplit(sapply(split(encounterv$diagname,encounterv$patientid),
function(x){sum(1*(regexpr("Type 1",x)>0))>0}),encounterv$patientid)
bmiv <- bmiv[!duplicated(bmiv$patientid),c("patientid","meanbmi")]
glucosev <- glucosev[!duplicated(glucosev$patientid),c("patientid","meanglu")]
hba1cv <- hba1cv[!duplicated(hba1cv$patientid),c("patientid","meanhba")]
encounterv <- encounterv[!duplicated(encounterv$patientid),c("patientid","agebase","race","gender","T2DM","T1DM")]
valid.dat <- merge(encounterv,bmiv)
valid.dat <- merge(valid.dat,glucosev, all = T)
valid.dat <- merge(valid.dat,hba1cv, all = T)
valid.dat$agebase <- ifelse(is.na(valid.dat$agebase),mean(valid.dat$agebase,na.rm = T),valid.dat$agebase)
valid.dat$T2DM <- ifelse(is.na(valid.dat$T2DM),FALSE,valid.dat$T2DM)
valid.dat$T1DM <- ifelse(is.na(valid.dat$T1DM),FALSE,valid.dat$T1DM)
valid.dat$meanbmi <- ifelse(is.na(valid.dat$meanbmi),mean(valid.dat$meanbmi,na.rm = T),valid.dat$meanbmi)
valid.dat$meanglu <- ifelse(is.na(valid.dat$meanglu),100,valid.dat$meanglu)
valid.dat$meanhba <- ifelse(is.na(valid.dat$meanhba),5,valid.dat$meanhba)
valid.p <- expit(-6+log(1.1)*valid.dat$agebase + log(1.5)*(valid.dat$race %in% c("Black","Hispanic","Other")) +
log(2)*valid.dat$T2DM -log(3)*valid.dat$T1DM + log(1.1)*valid.dat$meanbmi + log(2)*(valid.dat$meanglu > 200)+
log(2)*(valid.dat$meanglu > 7))
valid.dat$gold <- rbinom(nrow(valid.dat),1,valid.p)
## Write out files
encounter.out <- encounter[,c("patientid","servicedate","age","race","gender","proc","diag","prov")]
measure.out   <- meascomb
# get rid of duplicate measures of the same type on the same day
temp <- paste(measure.out$patientid,measure.out$servicedate,measure.out$measuretype)
measure.out <- measure.out[!duplicated(temp),]
meds.out      <- meds
valid.out     <- valid.dat[,c("patientid","gold")]
names(valid.out) <- c("patientid","T2DMv")
write.csv(encounter.out,"/Users/rhubb/Documents/GitHub/ASA_EHR_ShortCourse/data/encounter.csv", row.names = F)
write.csv(measure.out,"/Users/rhubb/Documents/GitHub/ASA_EHR_ShortCourse/data/measures.csv", row.names = F)
write.csv(meds.out,"/Users/rhubb/Documents/GitHub/ASA_EHR_ShortCourse/data/meds.csv", row.names = F)
write.csv(valid.out,"/Users/rhubb/Documents/GitHub/ASA_EHR_ShortCourse/data/validation.csv", row.names = F)
encounter = read.csv("https://raw.githubusercontent.com/rhubb/ASA_EHR_ShortCourse/master/data/encounter.csv", head=T)
meds = read.csv("https://raw.githubusercontent.com/rhubb/ASA_EHR_ShortCourse/master/data/meds.csv", head=T)
measures = read.csv("https://raw.githubusercontent.com/rhubb/ASA_EHR_ShortCourse/master/data/measures.csv", head=T)
validation = read.csv("https://raw.githubusercontent.com/rhubb/ASA_EHR_ShortCourse/master/data/validation.csv", head=T)
validation = read.csv("https://raw.githubusercontent.com/rhubb/ASA_EHR_ShortCourse/master/data/validation.csv", head=T)
install.packages("RColorBrewer")
install.packages("rpart")
install.packages("pROC")
install.packages("boot")
install.packages("gee")
library(RColorBrewer)
library(rpart)
library(pROC)
library(boot)
library(gee)
summary(measures)
# separate variables by measurement type
height <- measures[measures$measuretype == "height",-4]
names(height) <- c("patientid","servicedate","height")
weight <- measures[measures$measuretype == "weight",-4]
names(weight) <- c("patientid","servicedate","weight")
glucose <- measures[measures$measuretype == "glucose",-4]
names(glucose) <- c("patientid","servicedate","glucose")
hba1c <- measures[measures$measuretype == "hba1c",-4]
names(hba1c) <- c("patientid","servicedate","hba1c")
# explore number of observations available per patient for each measurement type
summary(c(table(factor(height$patientid, levels = unique(encounter$patientid)))))
summary(c(table(factor(weight$patientid, levels = unique(encounter$patientid)))))
summary(c(table(factor(glucose$patientid, levels = unique(encounter$patientid)))))
summary(c(table(factor(hba1c$patientid, levels = unique(encounter$patientid)))))
# number of children with no measures available
sum(c(table(factor(height$patientid, levels = unique(encounter$patientid)))) == 0)
sum(c(table(factor(weight$patientid, levels = unique(encounter$patientid)))) == 0)
sum(c(table(factor(glucose$patientid, levels = unique(encounter$patientid)))) == 0)
sum(c(table(factor(hba1c$patientid, levels = unique(encounter$patientid)))) == 0)
# summarize distribution of variables across all patients, look for values outside plausible range
summary(height$height)
summary(weight$weight)
summary(glucose$glucose)
summary(hba1c$hba1c)
# values that are clearly outside plausible range can be eliminated, those that seem unlikely should be
# noted for discussion with clinical collaborators
weight$weight <- ifelse(weight$weight < 0, NA, weight$weight)
extreme.heights <- weight$patientid[height$height > 300] # flag patients with height > 3 m
extreme.weights <- weight$patientid[weight$weight > 200] # flag patients with weight > 200 kg
# look for implausible patterns in longitudinal measurements
height.s <- split(data.frame(height$servicedate,height$height),height$patientid)
weight.s <- split(data.frame(as.Date(weight$servicedate),weight$weight),weight$patientid)
glucose.s <- split(data.frame(as.Date(glucose$servicedate),glucose$glucose),glucose$patientid)
hba1c.s <- split(data.frame(as.Date(hba1c$servicedate),hba1c$hba1c),hba1c$patientid)
# summarize rate of change and within-patient variability
longrate <- function(x){
days <- as.numeric(as.Date(x[,1]))
measure <- x[,2]
mod <- lm(measure ~ days)
rate <- mod$coef[2]
residsd <- summary(mod)$sigma
return(c(rate,residsd))
}
height.lm <- t(sapply(height.s,longrate))
# take a look at a few patients with implausible trajectories
height.decrease.ind <- which(height.lm[,1] < -1)
par(mfrow = c(3,3))
for (i in 1:9){
plot(as.numeric(as.Date(height.s[[height.decrease.ind[i]]][,1])),height.s[[height.decrease.ind[i]]][,2])
}
# a few of these measures look very suspicious, as if one measurement is about 2.5 times the other
# take a closer look at an example case
height[height$patientid == names(height.decrease.ind[3]),]
# could also look at adjacent pairs of measures to look for implausible sequential changes
# generate BMI and look for implausible values
height$iddate <- paste(height$patientid,height$servicedate)
weight$iddate <- paste(weight$patientid,weight$servicedate)
bmi <- merge(height,weight,by = "iddate") # merge height and weight data
bmi$bmi <- bmi$weight/(bmi$height/100)^2
par(mfrow = c(2,2))
hist(bmi$bmi)
plot(bmi$weight,bmi$bmi)
plot(bmi$height,bmi$bmi)
# unusual groupings in BMI plots suggest patients with wrong units for height or weight
# select a rule for eliminating these heights or weights
bmi$height <- ifelse(bmi$height > 250, bmi$height/2.54, bmi$height)
bmi$bmi <- bmi$weight/(bmi$height/100)^2
bmi$bmimean <- unsplit(sapply(split(bmi$bmi,bmi$patientid.x),mean,na.rm = T),bmi$patientid.x)
bmi$bmimax <- unsplit(sapply(split(bmi$bmi,bmi$patientid.x),max,na.rm = T),bmi$patientid.x)
bmi$firstbmi <- unsplit(sapply(split(bmi$bmi,bmi$patientid.x),function(x){x[1]}),bmi$patientid.x)
glucose$glucosemean <- unsplit(sapply(split(glucose$glucose,glucose$patientid),mean,na.rm = T),glucose$patientid)
glucose$glucosemax <- unsplit(sapply(split(glucose$glucose,glucose$patientid),max,na.rm = T),glucose$patientid)
hba1c$hba1cmean <- unsplit(sapply(split(hba1c$hba1c,hba1c$patientid),mean,na.rm = T),hba1c$patientid)
hba1c$hba1cmax <- unsplit(sapply(split(hba1c$hba1c,hba1c$patientid),max,na.rm = T),hba1c$patientid)
anycode <- function(x,code){
code.present <- x %in% code
return(sum(code.present)>0)
}
# Count number of occurences of code
sumcode <- function(x,code){
code.present <- x %in% code
return(sum(code.present))
}
codeorder <- function(x){
metdates <- as.Date(x$dates[x$drugs == "metformin"])
insdates <- as.Date(x$dates[x$drugs == "insulin"])
if (length(metdates) == 0) metfirst <- 0
else if (length(metdates) > 0 & length(insdates) == 0) metfirst <- 1
else if (length(metdates) == 0 & length(insdates) == 0) metfirst <- 0
else metfirst <- suppressMessages(1*(min(metdates) < min(insdates)))
return(metfirst)
}
encounter$T2DM <- unsplit(sapply(split(encounter$diag,encounter$patientid),anycode,code = c("250.00","E11.9")),encounter$patientid)
encounter$T2DMnum <- unsplit(sapply(split(encounter$diag,encounter$patientid),sumcode,code = c("250.00","E11.9")),encounter$patientid) # number of occurence of T2DM code
encounter$T1DM <- unsplit(sapply(split(encounter$diag,encounter$patientid),anycode,code = c("250.01","E10.9")),encounter$patientid)
encounter$endo <- unsplit(sapply(split(encounter$prov,encounter$patientid),anycode,code = "46"),encounter$patientid)
meds$anyinsulin <- unsplit(sapply(split(meds$drug,meds$patientid),anycode,code = "insulin"),meds$patientid)
meds$anymetformin <- unsplit(sapply(split(meds$drug,meds$patientid),anycode,code = "metformin"),meds$patientid)
meds$metforminfirst <- unsplit(sapply(split(data.frame(dates=meds$presdate,drugs=meds$drug),
meds$patientid),codeorder),meds$patientid)
encounter$agemean <- unsplit(sapply(split(encounter$age,encounter$patientid),mean,na.rm = T),encounter$patientid)
# create merged dataset with one observation per patient and aggregate variables
encounter1 <- encounter[!duplicated(encounter$patientid),c("patientid","agemean","race","gender","T2DM","T1DM","endo","T2DMnum")]
bmi1 <- bmi[!duplicated(bmi$patientid.x),c("patientid.x","bmimean","bmimax","firstbmi")]
names(bmi1) <- c("patientid","bmimean","bmimax","firstbmi")
glucose1 <- glucose[!duplicated(glucose$patientid),c("patientid","glucosemean","glucosemax")]
hba1c1 <- hba1c[!duplicated(hba1c$patientid),c("patientid","hba1cmean","hba1cmax")]
meds1  <- meds[!duplicated(meds$patientid),c("patientid","anyinsulin","anymetformin","metforminfirst")]
data1 <- Reduce(function(x,y){merge(x,y, all = T)},list(encounter1,bmi1,glucose1,hba1c1,meds1,validation))
# create indicators for availability of any glucose or HbA1c measures
data1$anyglucose <- !is.na(data1$glucosemean)
data1$anyhba1c   <- !is.na(data1$hba1cmean)
# set instulin and metformin to false for patients with no medication data
data1$anyinsulin <- ifelse(is.na(data1$anyinsulin),FALSE,data1$anyinsulin)
data1$anymetformin <- ifelse(is.na(data1$anymetformin),FALSE,data1$anymetformin)
# Use gold standard labels from validation data set to construct prediction models for T2DM
# Logistic regression
mod.glm <- glm(T2DMv ~ agemean + factor(race) + factor(gender) + T2DM + T1DM + endo + bmimean + anyglucose + anyhba1c, data = data1, family = "binomial")
summary(mod.glm)
# Logistic regression
mod.glm <- glm(T2DMv ~ agemean + factor(race) + factor(gender) + T2DM + T1DM  + bmimean + anyglucose + anyhba1c, data = data1, family = "binomial")
data1$T2DMglm <- predict(mod.glm, newdata = data1)
pred.glm <- na.omit(data.frame(pred = data1$T2DMglm,true = data1$T2DMv))
perf.glm <- roc(pred.glm$true, pred.glm$pred, auc = TRUE, print.auc = TRUE, show.thres = TRUE)
plot(perf.glm)
print("Logistic regression AUC")
perf.glm$auc
# CART
mod.cart <- rpart(T2DMv ~ agemean + factor(race) + factor(gender) + T2DM + T1DM + bmimean + anyglucose + anyhba1c + glucosemean + hba1cmean, data = data1, method = "class")
mod.pruned<- prune(mod.cart, cp= mod.cart$cptable[which.min(mod.cart$cptable[,"xerror"]),"CP"])
plot(mod.pruned)
text(mod.pruned)
mod.cart
summary(mod.cart)
plot(mod.cart)
text(mod.cart)
table(data1$race)
mod.cart$cptable
which.min(mod.cart$cptable[,"xerror"])
mod.cart$cptable[which.min(mod.cart$cptable[,"xerror"]),"CP"]
mod.pruned<- prune(mod.cart, cp= mod.cart$cptable[which.min(mod.cart$cptable[,"xerror"]),"CP"])
plot(mod.pruned)
text(mod.pruned)
plot(mod.pruned)
text(mod.pruned)
help(rpart)
# CART
set.seed(201909)
mod.cart <- rpart(T2DMv ~ agemean + factor(race) + factor(gender) + T2DM + T1DM + bmimean + anyglucose + anyhba1c + glucosemean + hba1cmean, data = data1, method = "class")
mod.pruned<- prune(mod.cart, cp= mod.cart$cptable[which.min(mod.cart$cptable[,"xerror"]),"CP"])
plot(mod.pruned)
text(mod.pruned)
mod.cart$cptable
# CART
set.seed(20190910)
mod.cart <- rpart(T2DMv ~ agemean + factor(race) + factor(gender) + T2DM + T1DM + bmimean + anyglucose + anyhba1c + glucosemean + hba1cmean, data = data1, method = "class")
mod.pruned<- prune(mod.cart, cp= mod.cart$cptable[which.min(mod.cart$cptable[,"xerror"]),"CP"])
mod.cart$cptable
mod.pruned<- prune(mod.cart, cp= mod.cart$cptable[which.min(mod.cart$cptable[,"xerror"]),"CP"])
plot(mod.pruned)
plot(mod.pruned)
text(mod.pruned)
plot(mod.pruned)
text(mod.pruned)
data1$T2DMcart <- predict(mod.pruned, newdata = data1, type = "prob")
data1$T2DMcart.class <- predict(mod.pruned, newdata = data1, type = "class")
pred.cart <- na.omit(data.frame(pred = data1$T2DMcart[,2],true = data1$T2DMv))
perf.cart <- roc(pred.cart$true, pred.cart$pred, auc = TRUE, print.auc = TRUE, show.thres = TRUE)
plot(perf.cart)
print("CART AUC")
perf.cart$auc
T2DM.rule <- function(x){
if (x$T1DM ==1) T2DM <- 0
else{
if (x$T2DM ==1){
if (x$anyinsulin == 1){
if (x$anymetformin == 0){
if (x$T2DMnum < 2){
T2DM <- 0
} else{
T2DM <- 1
}
} else{
if (x$metforminfirst == 0){
T2DM <- 0
} else{
T2DM <- 1
}
}
} else{
if (x$anymetformin == 1){
T2DM <- 1
} else{
if ((!is.na(x$glucosemax) & x$glucosemax > 200) | (!is.na(x$hba1cmax) & x$hba1cmax > 6.5)){
T2DM <- 1
} else{
T2DM <- 0
}
}
}
} else{
if (x$anymetformin == 0){
T2DM <- 0
} else{
if ((!is.na(x$glucosemax) & x$glucosemax > 200) | (!is.na(x$hba1cmax) & x$hba1cmax > 6.5)){
T2DM <- 1
} else{
T2DM <- 0
}
}
}
}
return(T2DM)
}
data1$T2DMemerge <- unsplit(sapply(split(data1,data1$patientid),T2DM.rule),data1$patientid)
print("eMERGE specificity")
1-mean(data1$T2DMemerge[data1$T2DMv == 0 & !is.na(data1$T2DMv)])
print("eMERGE sensitivity")
mean(data1$T2DMemerge[data1$T2DMv == 1 & !is.na(data1$T2DMv)])
print("eMERGE PPV")
1-mean(data1$T2DMv[data1$T2DMemerge == 0],na.rm = T)
print("eMERGE NPV")
mean(data1$T2DMv[data1$T2DMemerge == 1 ],na.rm = T)
encounter$numvisit <- unsplit(sapply(split(encounter$servicedate,encounter$patientid),function(x){
length(x)}),encounter$patientid)
summary(encounter$numvisit)
## Merge number of encounters onto data set with one observation per patient
numvisit <- encounter[!duplicated(encounter$patientid),c("patientid","numvisit")]
data1 <- merge(data1,numvisit)
## Analyze association between BMI and T2DM with and without conditioning on visit intensity
bmi.glm1 <- glm(T2DMv ~ bmimean, data = data1, family = "binomial")
bmi.glm2 <- glm(T2DMv ~ bmimean + numvisit, data = data1, family = "binomial")
summary(bmi.glm1)
summary(bmi.glm2)
glm(T2DMv ~ numvisit, data = data1, family = "binomial")
names(data1)
## Analyze association between BMI and T2DM with and without conditioning on visit intensity
bmi.glm1 <- glm(T2DMemerge ~ bmimean, data = data1, family = "binomial")
bmi.glm2 <- glm(T2DMemerge ~ bmimean + numvisit, data = data1, family = "binomial")
summary(bmi.glm1)
summary(bmi.glm2)
bmi.glm2 <- glm(T2DMcart.class ~ bmimean + numvisit, data = data1, family = "binomial")
summary(bmi.glm2)
sens <- mean(as.numeric(as.character(data1$T2DMcart.class[data1$T2DMv == 1 & !is.na(data1$T2DMv)])))
spec <- 1-mean(as.numeric(as.character(data1$T2DMcart.class[data1$T2DMv == 0 & !is.na(data1$T2DMv)])))
a <- sum(data1$T2DMcart.class == 1 & data1$endo == 1)
b <- sum(data1$T2DMcart.class == 0 & data1$endo == 1)
c <- sum(data1$T2DMcart.class == 1 & data1$endo == 0)
d <- sum(data1$T2DMcart.class == 0 & data1$endo == 0)
or.std <- a*d/(b*c)
or.mh <- (a/(a+b)-(1-spec))/(c/(c+d)-(1-spec))*(sens-c/(c+d))/(sens-a/(a+b))
or.std
or.mh
post.prob <- function(phat,S,sens,spec){
post.probY <- ifelse(S== 1, sens*phat/(sens*phat+(1-spec)*(1-phat)),
(1-spec)*phat/((1-spec)*phat+sens*(1-phat)))
return(post.probY)
}
# EM algorithm proposed by Magder and Hughes
mh.EM <- function(fmla, sens, spec, tol = 10^-4, maxit = 10){
data1$Y <- data1$T2DMcart.class
or1 <- glm(fmla, data = data1, family = "binomial")
p0 <- predict(or1, type = "response")
dif <- 1
j <- 0
while (dif > tol & j < maxit){
w <- post.prob(p0,data1$T2DMcart.class,sens,spec)
data2 <- rbind(data1, data1)
data2$w <- c(w,1-w)
data2$Y <- c(rep(1,nrow(data1)),rep(0,nrow(data1)))
suppressWarnings(or2 <- glm(fmla, data = data2, family = "binomial", weights = w))
p0 <- predict(or2, type = "response")
dif <- max(abs(or1$coef-or2$coef))
or1 <- or2
j <- j+1
}
if (dif > tol) return("Did not converge")
else return(or2)
}
# fit model
fmla.endo <- formula("Y ~ agemean + factor(race) + gender + endo")
mod.MH <- mh.EM(fmla.endo, sens, spec, maxit = 40)
summary(mod.MH)
mod.MH
# naive model for comparison
mod.cart <- glm(T2DMcart.class ~ agemean + factor(race) + gender + endo, data = data1, family = "binomial")
summary(mod.cart)
# naive model for comparison
mod.cart <- glm(T2DMcart.class ~ agemean + factor(race) + gender + bmimean + endo, data = data1, family = "binomial")
summary(mod.cart)
# fit model
fmla.endo <- formula("Y ~ agemean + factor(race) + gender +  bmimean + endo")
mod.MH <- mh.EM(fmla.endo, sens, spec, maxit = 40)
mod.MH
encounter = read.csv("https://raw.githubusercontent.com/rhubb/ASA_EHR_ShortCourse/master/data/encounter.csv", head=T)
meds = read.csv("https://raw.githubusercontent.com/rhubb/ASA_EHR_ShortCourse/master/data/meds.csv", head=T)
measures = read.csv("https://raw.githubusercontent.com/rhubb/ASA_EHR_ShortCourse/master/data/measures.csv", head=T)
validation = read.csv("https://raw.githubusercontent.com/rhubb/ASA_EHR_ShortCourse/master/data/validation.csv", head=T)
## Use summary statistics and plots to investigate basic characteristics of the data
summary(measures)
# separate variables by measurement type
height <- measures[measures$measuretype == "height",-4]
names(height) <- c("patientid","servicedate","height")
weight <- measures[measures$measuretype == "weight",-4]
names(weight) <- c("patientid","servicedate","weight")
glucose <- measures[measures$measuretype == "glucose",-4]
names(glucose) <- c("patientid","servicedate","glucose")
hba1c <- measures[measures$measuretype == "hba1c",-4]
names(hba1c) <- c("patientid","servicedate","hba1c")
chol <- measures[measures$measuretype == "chol",-4]
names(chol) <- c("patientid","servicedate","chol")
# explore number of observations available per patient for each measurement type
summary(c(table(factor(height$patientid, levels = unique(encounter$patientid)))))
summary(c(table(factor(weight$patientid, levels = unique(encounter$patientid)))))
summary(c(table(factor(glucose$patientid, levels = unique(encounter$patientid)))))
summary(c(table(factor(hba1c$patientid, levels = unique(encounter$patientid)))))
summary(c(table(factor(chol$patientid, levels = unique(encounter$patientid)))))
# number of children with no measures available
sum(c(table(factor(height$patientid, levels = unique(encounter$patientid)))) == 0)
sum(c(table(factor(weight$patientid, levels = unique(encounter$patientid)))) == 0)
sum(c(table(factor(glucose$patientid, levels = unique(encounter$patientid)))) == 0)
sum(c(table(factor(hba1c$patientid, levels = unique(encounter$patientid)))) == 0)
sum(c(table(factor(chol$patientid, levels = unique(encounter$patientid)))) == 0)
# summarize distribution of variables across all patients, looking for values outside the plausible range
summary(height$height)
summary(weight$weight)
summary(glucose$glucose)
summary(hba1c$hba1c)
summary(chol$chol)
# values that are clearly outside the plausible range can be eliminated, those that seem unlikely should be
# noted for discussion with clinical collaborators
weight$weight <- ifelse(weight$weight < 0, NA, weight$weight)
extreme.heights <- weight$patientid[height$height > 300] # flag patients with height > 3 m
extreme.weights <- weight$patientid[weight$weight > 200] # flag patients with weight > 200 kg
# implausible patterns in longitudinal measurements provide an additional means of identifying data errors
height.s <- split(data.frame(height$servicedate,height$height),height$patientid)
weight.s <- split(data.frame(as.Date(weight$servicedate),weight$weight),weight$patientid)
glucose.s <- split(data.frame(as.Date(glucose$servicedate),glucose$glucose),glucose$patientid)
hba1c.s <- split(data.frame(as.Date(hba1c$servicedate),hba1c$hba1c),hba1c$patientid)
# summarize rate of change and within-patient variability
longrate <- function(x){
days <- as.numeric(as.Date(x[,1]))
measure <- x[,2]
mod <- lm(measure ~ days)
rate <- mod$coef[2]
residsd <- summary(mod)$sigma
return(c(rate,residsd))
}
height.lm <- t(sapply(height.s,longrate))
# take a look at a few patients with implausible trajectories
height.decrease.ind <- which(height.lm[,1] < -0.5)
par(mfrow = c(2,3))
for (i in 1:6){
plot(as.numeric(as.Date(height.s[[height.decrease.ind[i]]][,1])),height.s[[height.decrease.ind[i]]][,2], xlab = "date", ylab = "height")
}
# a few of these measures look very suspicious, as if one measurement is about 2.5 times the other
# take a closer look at an example case
height[height$patientid == names(height.decrease.ind[1]),]
# generate BMI and look for implausible values
height$iddate <- paste(height$patientid,height$servicedate)
weight$iddate <- paste(weight$patientid,weight$servicedate)
bmi <- merge(height,weight,by = "iddate") # merge height and weight data
bmi$bmi <- bmi$weight/(bmi$height/100)^2
par(mfrow = c(2,2))
hist(bmi$bmi)
plot(bmi$weight,bmi$bmi)
plot(bmi$height,bmi$bmi)
# unusual groupings in BMI plots suggest patients with wrong units for height or weight
# select a rule for eliminating these heights or weights
bmi$height <- ifelse(bmi$height > 250, bmi$height/2.54, bmi$height)
bmi$bmi <- bmi$weight/(bmi$height/100)^2
par(mfrow = c(1,2))
hist(bmi$bmi)
plot(bmi$weight,bmi$bmi)
lenth(inique(encounters$patientid))
lenth(unique(encounters$patientid))
length(unique(encounters$patientid))
length(unique(encounter$patientid))
names(validation)
height <- measures[measures$measuretype == "height",-4]
names(height) <- c("patientid","servicedate","height")
weight <- measures[measures$measuretype == "weight",-4]
names(weight) <- c("patientid","servicedate","weight")
glucose <- measures[measures$measuretype == "glucose",-4]
names(glucose) <- c("patientid","servicedate","glucose")
hba1c <- measures[measures$measuretype == "hba1c",-4]
names(hba1c) <- c("patientid","servicedate","hba1c")
chol <- measures[measures$measuretype == "chol",-4]
names(chol) <- c("patientid","servicedate","chol")
summary(c(table(factor(height$patientid, levels = unique(encounter$patientid)))))
hist(c(table(factor(height$patientid, levels = unique(encounter$patientid)))))
extreme.heights <- weight$patientid[height$height > 300] # flag patients with height > 3 m
extreme.weights <- weight$patientid[weight$weight > 200] # flag patients with weight > 200 kg
extreme.heights
height.s <- split(data.frame(height$servicedate,height$height),height$patientid)
height.s[[1]]
height.s[[3]]
